// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  googleId        String?   @unique
  username        String?   @unique
  password        String?
  name            String?
  avatar          String?
  provider        String    @default("google") // "google" or "local"
  isEmailVerified Boolean   @default(false)
  needsPasswordSetup Boolean @default(false) // true for OAuth users who haven't set password
  resetOTP        String?   // OTP for password reset
  resetOTPExpiry  DateTime? // OTP expiry time
  lastLogin       DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  videos Video[]
  stories Story[]

  @@map("users")
}

model Video {
  id          String   @id @default(cuid())
  userId      String
  url         String
  title       String
  description String?
  duration    Float?
  uploadDate  DateTime @default(now())
  cloudinaryId String?
  thumbnailUrl String?
  
  // AI Processing Status
  transcriptionStatus String @default("pending") // pending, processing, completed, failed
  visionStatus       String @default("pending") // pending, processing, completed, failed
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags Tag[]
  storyVideos StoryVideo[]
  transcript Transcript?

  @@map("videos")
}

model Tag {
  id        String   @id @default(cuid())
  videoId   String
  label     String
  confidence Float?
  timestamp Float?   // timestamp in seconds for when this tag appears
  type      String   // "object", "scene", "activity", "emotion", "text"
  createdAt DateTime @default(now())

  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("tags")
}

model Story {
  id               String   @id @default(cuid())
  userId           String
  prompt           String
  generatedVideoUrl String?
  storyData        String?  @db.Text // JSON string containing story plan and metadata
  status           String   @default("pending") // pending, processing, completed, failed
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  storyVideos StoryVideo[]

  @@map("stories")
}

model StoryVideo {
  id       String @id @default(cuid())
  storyId  String
  videoId  String
  order    Int
  startTime Float? // start time in seconds
  endTime   Float? // end time in seconds

  story Story @relation(fields: [storyId], references: [id], onDelete: Cascade)
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([storyId, order])
  @@map("story_videos")
}

model Transcript {
  id        String   @id @default(cuid())
  videoId   String   @unique

  // Multilingual transcripts stored as JSON
  // Format: { "en-US": { transcript, confidence, words, paragraphs, utterances }, "fr": {...}, ... }
  transcriptions Json @db.JsonB

  // Processing metadata
  processedLanguages String[] // Array of language codes that were processed
  processingStatus   String   @default("pending") // pending, processing, completed, failed

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  video Video @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@map("transcripts")
}


